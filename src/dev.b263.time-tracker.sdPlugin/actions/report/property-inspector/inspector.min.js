'use strict';

const StateKey = {
  currentEvent: "currentEvent",
  settings: "settings",
  globalSettings: "globalSettings",
  externalWindow: "externalWindow",
};

class TTApi {
  static instance = null;

  static async login(email, password) {
    email = encodeURIComponent(email);
    password = encodeURIComponent(password);
    const url = `https://api.trackingtime.co/api/v4/login?email=${email}&password=${password}`;
    const response = await fetch(url);
    return response.json();
  }

  constructor(bearerToken, accountId) {
    if (TTApi.instance) return TTApi.instance;
    this.bearerToken = bearerToken;
    this.accountId = accountId;
    TTApi.instance = this;
  }

  get fetchOptions() {
    return {
      headers: {
        Authorization: `Basic ${this.bearerToken}`,
      },
    };
  }

  async startTracking(settings) {
    const params = new URLSearchParams({
      ...this.definedParameters(settings),
      date: this.formatTime(new Date()),
      stop_running_task: true,
      return_task: true,
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/track?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async stopTracking(id) {
    const params = new URLSearchParams({
      date: this.formatTime(new Date()),
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/stop/${id}?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async syncTracking(id) {
    const params = new URLSearchParams({
      date: this.formatTime(new Date()),
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/sync/${id}?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async getProjects() {
    const url = `https://api.trackingtime.co/api/v4/${this.accountId}/projects`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async getTasks(projectId) {
    const url = `https://app.trackingtime.co/api/v4/tasks`;
    const response = await fetch(url, this.fetchOptions);
    const allTasks = (await response.json()).data;
    return allTasks.filter(
      (task) => +task.project_id === +projectId && task.visibility !== "HIDDEN"
    );
  }

  async addEvent(tracker, userId) {
    const end = new Date();
    const duration = Math.floor(
      (end.getTime() - tracker.startTime.getTime()) / 1000
    );
    if (duration < 1) return;
    const params = new URLSearchParams({
      project_id: tracker.settings.projectId,
      user_id: userId,
      start: this.formatTime(tracker.startTime),
      end: this.formatTime(end),
      duration,
    });
    const url = `https://api.trackingtime.co/api/v4/${
      this.accountId
    }/events/add?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async listTodaysTimeEntries(userId) {
    const today = this.formatDate(new Date());
    const params = new URLSearchParams({
      filter: "USER",
      id: userId,
      from: today,
      to: today,
    });
    const url = `https://app.trackingtime.co/api/v4/events?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  definedParameters(obj) {
    return Object.entries(obj).reduce(
      (obj, [key, value]) => (value ? { ...obj, [key]: value } : obj),
      {}
    );
  }

  formatDate(d) {
    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;
  }

  formatTime(d) {
    return `${this.formatDate(
      d
    )} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;
  }
}

/// <reference path="../../../libs/js/property-inspector.js" />
/// <reference path="../../../libs/js/utils.js" />


const State = new Map();

$PI.onConnected(
  ({ actionInfo, appInfo, connection, messageType, port, uuid }) => {
    console.log({ actionInfo, appInfo, connection, messageType, port, uuid });

    // const form = document.querySelector("#property-inspector");
    const {
      // eslint-disable-next-line no-unused-vars
      payload: { settings },
      action,
      // eslint-disable-next-line no-unused-vars
      context,
    } = actionInfo;

    // Utils.setFormValue(settings, form);

    // form.addEventListener(
    //   "input",
    //   Utils.debounce(150, () => {
    //     const value = Utils.getFormValue(form);
    //     console.log("setting", value);
    //     $PI.setSettings(value);
    //   })
    // );

    $PI.getSettings();
    $PI.getGlobalSettings();

    $PI.onDidReceiveSettings(action, ({ payload: { settings } }) =>
      onSettingsReceived(settings)
    );

    $PI.onDidReceiveGlobalSettings(({ payload: { settings } }) =>
      onGlobalSettingsReceived(settings)
    );

    document
      .getElementById("select-project")
      .addEventListener("change", ({ target: { value } }) => {
        $PI.setSettings({
          projectId: value,
        });
      });
  }
);

document.getElementById("sign-in").addEventListener("click", () => {
  State.set(StateKey.externalWindow, window.open("../../../external.html"));
});

document.getElementById("sign-out").addEventListener("click", () => {
  $PI.setGlobalSettings({
    accountId: null,
    bearerToken: null,
  });
  $PI.getGlobalSettings();
});

function onSettingsReceived(settings) {
  console.log("onSettingsReceived", settings);
  State.set(StateKey.settings, settings);
}

function onGlobalSettingsReceived(settings) {
  console.log("onGlobalSettingsReceived", settings);
  State.set(StateKey.globalSettings, settings);
  if (settings.accountId && settings.bearerToken) {
    document.getElementById("sign-in").style.display = "none";
    document.getElementById("sign-out").style.display = "block";
    loadProjects();
  } else {
    document.getElementById("sign-in").style.display = "block";
    document.getElementById("sign-out").style.display = "none";
  }
}

async function loadProjects() {
  const api = new TTApi(
    State.get(StateKey.globalSettings).bearerToken,
    State.get(StateKey.globalSettings).accountId
  );
  const result = await api.getProjects();
  let options = '<option value="0">Select project</option>';
  options += result.data
    .map((project) => {
      const selected =
        +State.get("settings").projectId === +project.id ? "selected" : "";
      return `<option ${selected} value="${project.id}">${project.name}</option>`;
    })
    .join("");
  document.getElementById("select-project").innerHTML = options;
}

window.addEventListener("message", (event) => {
  onLogin(event.data);
});

function onLogin(data) {
  State.get(StateKey.externalWindow)?.close();
  State.set(StateKey.externalWindow, null);
  $PI.setGlobalSettings(data);
  $PI.getGlobalSettings();
}
