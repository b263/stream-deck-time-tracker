'use strict';

class TTApi {
  static instance = null;

  static async login(email, password) {
    email = encodeURIComponent(email);
    password = encodeURIComponent(password);
    const url = `https://api.trackingtime.co/api/v4/login?email=${email}&password=${password}`;
    const response = await fetch(url);
    return response.json();
  }

  constructor(bearerToken, accountId) {
    if (TTApi.instance) return TTApi.instance;
    this.bearerToken = bearerToken;
    this.accountId = accountId;
    TTApi.instance = this;
  }

  get fetchOptions() {
    return {
      headers: {
        Authorization: `Basic ${this.bearerToken}`,
      },
    };
  }

  async startTracking(settings) {
    const params = new URLSearchParams({
      ...this.definedParameters(settings),
      date: this.formatTime(new Date()),
      stop_running_task: true,
      return_task: true,
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/track?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async stopTracking(id) {
    const params = new URLSearchParams({
      date: this.formatTime(new Date()),
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/stop/${id}?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async syncTracking(id) {
    const params = new URLSearchParams({
      date: this.formatTime(new Date()),
    });
    const url = `https://app.trackingtime.co/api/v4/tasks/sync/${id}?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async getProjects() {
    const url = `https://api.trackingtime.co/api/v4/${this.accountId}/projects`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async getTasks(projectId) {
    const url = `https://app.trackingtime.co/api/v4/tasks`;
    const response = await fetch(url, this.fetchOptions);
    const allTasks = (await response.json()).data;
    return allTasks.filter(
      (task) => +task.project_id === +projectId && task.visibility !== "HIDDEN"
    );
  }

  async addEvent(tracker, userId) {
    const end = new Date();
    const duration = Math.floor(
      (end.getTime() - tracker.startTime.getTime()) / 1000
    );
    if (duration < 1) return;
    const params = new URLSearchParams({
      project_id: tracker.settings.projectId,
      user_id: userId,
      start: this.formatTime(tracker.startTime),
      end: this.formatTime(end),
      duration,
    });
    const url = `https://api.trackingtime.co/api/v4/${
      this.accountId
    }/events/add?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  async listTodaysTimeEntries(userId) {
    const today = this.formatDate(new Date());
    const params = new URLSearchParams({
      filter: "USER",
      id: userId,
      from: today,
      to: today,
    });
    const url = `https://app.trackingtime.co/api/v4/events?${params.toString()}`;
    const response = await fetch(url, this.fetchOptions);
    return response.json();
  }

  definedParameters(obj) {
    return Object.entries(obj).reduce(
      (obj, [key, value]) => (value ? { ...obj, [key]: value } : obj),
      {}
    );
  }

  formatDate(d) {
    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;
  }

  formatTime(d) {
    return `${this.formatDate(
      d
    )} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;
  }
}

document.querySelector("#login").addEventListener("click", async () => {
  const email = document.querySelector("#email").value;
  const password = document.querySelector("#password").value;

  const data = await TTApi.login(email, password);

  if (data?.response?.status === 200) {
    window.opener.postMessage({
      bearerToken: btoa(`${email}:${password}`),
      accountId: data.data.account_id,
      userId: data.data.id,
    });
  } else {
    window.alert("Error logging in");
  }
});
